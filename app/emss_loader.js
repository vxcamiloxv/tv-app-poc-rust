// eslint-disable-next-line no-unused-vars
var Module;

/**
 * Loads a WASM module. moduleScriptUrl should point to a JS loader script
 * generated by Emscripten.
 *
 * This function loads modules with no MODULARIZE option.
 */
function loadWasmModule(moduleScriptUrl) {
  return new Promise((resolve, reject) => {
    try {
        // this is used by tizen app
      Module = {
        onRuntimeInitialized: () => {
          console.info('WASM runtime initialized');
          resolve();
        },
        onAbort: () => {
          console.error('WASM runtime aborted');
          reject(new Error('WASM runtime aborted'));
        },
        onExit: (status) => {
          console.info(`WASM onExit called with status: ${status}`);
        },
      };

      const script = document.createElement('script');

      script.addEventListener('load', () => {
        console.info(`Loaded ${moduleScriptUrl}`);
      });

      script.addEventListener('error', (errorEvent) => {
        console.error(`Cannot load ${moduleScriptUrl}`);
        reject(new Error(`Cannot load ${moduleScriptUrl} error: ${errorEvent.message}`));
      });

      script.async = true;
      script.src = moduleScriptUrl;
      document.body.appendChild(script);
    } catch (err) {
      console.error(err);
      reject(new Error('Cannot instantiate WASM module!'));
    }
  });
}

window.addEventListener('DOMContentLoaded', async () => {
  const wasmLoadingDiv = document.getElementById('wasm-loading');
  try {
    await loadWasmModule('wasm_modules/wasm_player/Debug/wasm_player.js');
  } catch (ex) {
    wasmLoadingDiv.innerHTML = '<p class="error">Cannot load WASM module.</p>';
  }
});
